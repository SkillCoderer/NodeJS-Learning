===========================================
Class 4/14/2025
===========================================

JSON Datatypes (Accepted):
- String
- Number
- Boolean
- Objects
  - Arrays (a type of Object)
- Null

JSON Datatypes (Not Accepted):
- Functions
- Undefined
- Date Object

BSON (Binary JSON):
- Stores data in a binary format for efficiency.
- Additional Datatypes in BSON (not in JSON):
  - ObjectID
  - Double
  - Timestamp
  - Binary Datatypes

-------------------------------------------
Relational Database:
- Stores data in tables (e.g., MySQL, PostgreSQL, MSSQL).
- Structure: Database -> Tables -> Data

Non-Relational Database:
- Stores data as JSON objects (e.g., MongoDB, CouchDB).
Ex:
{
  "name": "Ram Satti",
  "class": 7
}

MongoDB Overview:
- Non-Relational Database with Collections & Documents
  - Database -> Notebook
  - Collections -> Page
  - Documents -> Content on Pages

Tools:
- Atlas (Cloud): Cloud service for MongoDB databases.
- Compass (Local): Beginner-friendly GUI for local databases.
- MongoShell: CLI for database and collection management.

Creating a Database:
use {dbname}

===========================================
Class 4/15/2025
===========================================

CRUD Operations in MongoDB:

Create:
db.{collectionName}.insertOne({
  name: "Ram Satti",
  age: 13,
  location: "USA"
})
db.{collectionName}.insertMany([...])

Delete:
db.{collectionName}.deleteOne(...)
db.{collectionName}.deleteMany(...)

MongoDB Datatypes:
- String
- Numerical
  - Int32 -> Stores integers in 32 Bits of storage
  - Long  -> Stores float in 64 Bits of storage
  - Double -> Stores integers in 64 Bits of storage
- Date
  - Date() -> Gives local date string
  - new Date(), ISODate() -> Standard ISO 8601 format
- Boolean
- Array

===========================================
Class 4/16/2025
===========================================

Operators:
Used to perform operations on data (comparisons, logic, manipulation)

Logical Operators:
- $and -> both queries must be true
  db.studentData.find({
    $and: [
      {name: 'Ram Sqtti'},
      {grade: 'B'}
    ]
  })

- $or -> at least one query must be true
  db.studentData.find({
    $or: [
      {name: 'Ram Sqtti'},
      {grade: 'B'}
    ]
  })

- $not -> opposite of the condition
- $nor -> neither condition should be true
  db.studentData.find({
    $nor: [
      {name: 'Ram Satti'},
      {grade: 'B'}
    ]
  })

Comparison Operators:
- $eq -> Equals
  db.{collectionName}.find({field: {$eq: value}})

- $ne -> Not Equals
  db.{collectionName}.find({field: {$ne: value}})

- $gt -> Greater Than
  db.{collectionName}.find({field: {$gt: value}})

- $lt -> Less Than
  db.{collectionName}.find({field: {$lt: value}})

- $gte -> Greater Than or Equal
  db.{collectionName}.find({field: {$gte: value}})

- $lte -> Less Than or Equal
  db.{collectionName}.find({field: {$lte: value}})

- $in -> Includes (any match from array)
  db.{collectionName}.find({field: {$in: [value1, value2, value3]}})

- $nin -> Not Includes (no match from array)
  db.{collectionName}.find({field: {$nin: [value1, value2, value3]}})

Update Operators:
- $set -> Update a field
  db.{collectionName}.updateOne({field: value}, {$set: {fieldToUpdate: newValue}})

- $unset -> Remove a field
  db.{collectionName}.updateOne({field: value}, {$unset: {fieldToRemove: ""}})

===========================================
Class 4/18/2025 (Rescheduled Class 4/17)
===========================================

Array Operators:

- $push -> Add elements to end of array
  db.{collectionName}.updateOne({field: value}, {$push: {arrayField: valueToAdd}})

- $pop -> Remove first or last element
  db.{collectionName}.updateOne({field: value}, {$pop: {arrayField: 1}})
    // 1 = remove last
    // -1 = remove first
    // ONLY these two numbers allowed

- $addToSet -> Add only if value is not already in array
  db.{collectionName}.updateOne({field: value}, {$addToSet: {arrayField: valueToAdd}})

- $pull -> Remove elements matching a condition
  db.{collectionName}.updateOne({field: value}, {$pull: {arrayField: valueToRemove}})

- $each -> Add multiple elements with $push or $addToSet
  db.{collectionName}.updateOne(
    {field: value},
    {$push: {arrayField: {$each: [value1, value2, value3]}}}
  )

===========================================
Class 4/21/2025
===========================================

Aggregation -> involves multiple stages where the data will be passing through each stage and gets modified as per the stage it is present in.

- $group -> Groups input documents by a specified identifier expression and applies the accumulator expressions to each group.
  - $sum -> Calculates the sum of numeric values for the grouped documents.
  Ex:
  db.{collectionName}.aggregate([
    {
      $group: {
        _id: "$fieldToGroupBy",
        total: { $sum: "$numericField" }
      }
    }
  ])

- $limit -> Limits the number of documents passed to the next stage in the pipeline.
  Ex:
  db.{collectionName}.aggregate([
    { $limit: 5 }
  ])

- $project -> Reshapes each document in the stream, such as by including, excluding, or adding new fields.
  - $concat -> Concatenates strings from multiple fields or values.
  Ex:
  db.{collectionName}.aggregate([
    {
      $project: {
        field1: 1,
        field2: 1,
        newField: { $concat: ["$field1", " ", "$field2"] }
      }
    }
  ])

- $sort -> Sorts all input documents and passes them to the next stage in the pipeline.
  Ex:
  db.{collectionName}.aggregate([
    { $sort: { fieldToSortBy: 1 } } // 1 for ascending, -1 for descending
  ])

- $match -> Filters the documents to pass only those that match the specified condition(s).
  Ex:
  db.{collectionName}.aggregate([
    { $match: { field: { $eq: value } } }
  ])

- $addFields -> Adds new fields to documents.
  Ex:
  db.{collectionName}.aggregate([
    {
      $addFields: {
        newField: { $avg: ["$field"] }
      }
    }
  ])

- $count -> Counts the number of documents in the pipeline and outputs the count.
  Ex:
  db.{collectionName}.aggregate([
    { $count: "totalDocuments" }
  ])

- $lookup -> Skip 4 now

- $out -> Writes the resulting documents of the aggregation pipeline to a specified collection.
  Ex:
  db.{collectionName}.aggregate([
    { $match: { field: { $eq: value } } },
    { $out: "newCollectionName" }
  ])

===========================================
Class 4/22/2025
===========================================

Indexes -> Pointers to a particular Field value

- Indexes improve query performance by allowing the database to quickly locate and access the data without scanning the entire collection.

Types of Indexes:
1. Single Field Index:
  - Used to create an index on a single field to improve query performance for that field.
  Ex:
  db.{collectionName}.createIndex({ field: 1 }) // 1 for ascending, -1 for descending

  - Query Example:
    db.{collectionName}.find({ field: value }).explain("executionStats")
    - `.find`: Retrieves documents from the collection that match the specified query.
    - `.explain("executionStats")`: Provides detailed information about the query execution, including performance statistics.

2. Multiple Field Index (Compound Index):
  - Used to create an index on multiple fields to optimize queries that filter or sort by those fields.
  Ex:
    db.{collectionName}.createIndex({ field1: 1, field2: -1 })

  - Query Example:
    db.{collectionName}.find({ field1: value1, field2: value2 }).explain("executionStats")
    - `.find`: Retrieves documents from the collection that match the specified query.
    - `.explain("executionStats")`: Provides detailed information about the query execution, including performance statistics.

3. dropIndex:
  - Removes an index from a collection.
  Ex:
    db.{collectionName}.dropIndex({ field: 1 })

  - To view existing indexes before dropping:
    db.{collectionName}.getIndexes()
    - `.getIndexes()`: Lists all indexes currently defined on the collection.

Schema -> A schema in MongoDB defines the structure of documents in a collection, including field names, types, and validation rules.
- Schema Example: 
  db.createCollection("posts", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: [ "title", "body" ],
      properties: {
        title: {
          bsonType: "string",
          description: "Title of post - Required."
        },
        body: {
          bsonType: "string",
          description: "Body of post - Required."
        },
        category: {
          bsonType: "string",
          description: "Category of post - Optional."
        },
        likes: {
          bsonType: "int",
          description: "Post like count. Must be an integer - Optional."
        },
        tags: {
          bsonType: ["string"],
          description: "Must be an array of strings - Optional."
        },
        date: {
          bsonType: "date",
          description: "Must be a date - Optional."
        }
      }
    }
  }
})

===========================================
Class 4/23/2025
===========================================

Connecting DB to Backend -> Driver or ORM

  - Driver -> A low-level library that allows direct interaction with the database using queries and commands.

  - ORM (Object Relational Mapper) -> tool that helps us to connect with the database and perform database operations using the backend language native objects.
  Source we will use:
    Mongoose -> https://mongoosejs.com/docs/api/mongoose.html#Mongoose.prototype.Decimal128
    Code in ./ExpressJs/dbConfig.js'
    Schemas in ./ExpressJs/models