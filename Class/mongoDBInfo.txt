// Class 4/14/2025

// JSON Datatypes:
// // Accepted:
// // // String
// // // Number
// // // Boolean
// // // Objects
// // // // Arrays (they are a type of Object)
// // // Null
// // Non-Accepted:
// // // Functions
// // // Undefined
// // // Date Object

// BSON -> Binary JSON
// // Binary (format) will let us store in Efficient way;
// // Additional Datatypes BSON has (that JSON doesn't)
// // // ObjectID
// // // Double
// // // Timestamp
// // // Binary Datatypes

// Relational Database -> Holds the data inside tables.
// // Ex: MySQL, PostgreSQL, MSSQL, etc.
// // Ex: Database -> Tables -> Data
// Non-Relational Database -> Holds data in the form of JSON Objects.
// // Ex: MongoDB, CouchDB, Sequalize, etc.
// // // Ex:
// // // {
// // //    "name": "Ram Satti",
// // //    "class": 7
// // // }

// MongoDB is a Non-Relational Database that has Collections & Documents
// // Database -> Notebook
// // Collections -> Page
// // Documents -> What we write on Pages

// Atlas (Cloud) -> Cloud Services provided by MongoDB where the DB's are stored at somewhere else
// Compass (Local) -> Beginner Friendly tool that helps you to have DB's in your local system.
// MongoShell -> CLI (Command Line Interface) where we put some commands instead of using UI inorder to create DB or Collections.

// Creating a DB -> use {dbname}

// Class 4/15/2025

// CRUD Operations in MongoDB
// // C -> Create; db.{collectionName}.(insertOne or insertMany)({
    name:"Ram Satti",
    age: 13,
    location: "USA"
})
// // R -> Read; 
// // // db.{collectionName}.find(); if specific -> .find({name: 'Ram'})
// // // db.{collectionName}.findOne({name : "Ram"}, {name: 1, _id: 0}) -> By Default return first Object in Collection; only give name, don't show id. Only one 0 value.
// // U -> Update; db.{collectionName}.(updateOne or updateMany)(
    {name: "Ram"}, -> Value wanted to be Changed
    {$set:{age:20}} -> New Value
    )
// // D -> Delete;  db.{collectionName}.(deleteOne or deleteMany)_

// MongoDB Datatypes
// // String
// // Numerical
// // // Int32 -> Stores integers that can be stored in 32 Bits of Storage
// // // Long -> Stores Float that can be stored in 64 Bits of Storage
// // // Double -> Stores integers that can be stored in 64 Bits of Storage
// // Date
// // // Date() -> Gives us the Local date String 
// // // new Date() & ISODate()-> Standard Date in the ISO Format
// // // // Standard Date -> A date format that adheres to the ISO 8601 standard, commonly used for international date representation.
// // // // ISO Format -> Internal Organization for Standardization
// // Boolean
// // Array

// Class 4/16/2025

// Operators -> Special symbols or keywords used to perform operations on data, such as comparisons, logical operations, or data manipulation.

// // Logical -> and, or, not, nor 
// // // and -> both queries true
// // // // db.studentData.find({
                $and : [
                {name: 'Ram Sqtti'},
                {grade: 'B'}
            ]
            })
// // // or -> one of queries true
// // // // db.studentData.find({
                $or : [
                {name: 'Ram Sqtti'},
                {grade: 'B'}
            ]
            })
// // // not -> opposite of
// // // nor -> neither of the conditions should be true; opposite of and
// // // // db.studentData.find({
                $nor : [
                {name: 'Ram Satti'},
                {grade: 'B'}
            ]
            })

// // Comparison -> eq, ne, gt, lt, gte, lte, in, nin
// // // Equals (eq) -> Return documents which are equal to param
// // // // db.{collectionName}.find({field: {$eq: value}})
// // // Not Equals (ne) -> Not Return documents which are equal to param
// // // // db.{collectionName}.find({field: {$ne: value}})
// // // Greater than (gt) -> Return documents where field is greater than param
// // // // db.{collectionName}.find({field: {$gt: value}})
// // // Less than (lt) -> Return documents where field is less than param
// // // // db.{collectionName}.find({field: {$lt: value}})
// // // Greater than or Equal to (gte) -> Return documents where field is greater than or equal to param
// // // // db.{collectionName}.find({field: {$gte: value}})
// // // Less than or Equal to (lte) -> Return documents where field is less than or equal to param
// // // // db.{collectionName}.find({field: {$lte: value}})
// // // includes (in) -> Return documents where field matches any value in the array
// // // // db.{collectionName}.find({field: {$in: [value1, value2, value3]}})
// // // not includes (nin) -> Return documents where field does not match any value in the array
// // // // db.collect{collectionName}ion.find({field: {$nin: [value1, value2, value3]}})

// // Update -> set, unset
// // // set -> Updates the value of a field to the specified value
// // // // db.{collectionName}.updateOne({field: value}, {$set: {fieldToUpdate: newValue}})
// // // unset -> Removes the specified field from a document
// // // // db.{collectionName}.updateOne({field: value}, {$unset: {fieldToRemove: ""}})